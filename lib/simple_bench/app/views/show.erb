<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

</style>
<body>
<!--
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
-->
<script src="js/d3.min.js"></script>
<script>

var margin = {top: 20, right: 80, bottom: 30, left: 50},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var color = d3.scale.category10();

var parseDate = d3.time.format("%Y%m%d").parse;

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
<% if results.size > 0 %>
<%= erb :'show_json', :locals => { :results => results } %>
<%
else # mock data
%>
<%= erb :'show_mock' %>
<%
end # mock data
%>

var x = d3.scale.ordinal()
    .rangePoints([0, width])
var y = d3.scale.linear()
    .range([height, 0])

var xf = function(d) { return d.bench; };
var yf = function(v) { return v.ips; };
var yff = function(v) { return d3.format("s")(v); };
var srt = function(a,b) { return a.ips - b.ips;}
window.onload = function() {
  color.domain(data.map(function(c) { return c.name; }));
    x.domain(data[0].values.map(xf)); // sort(srt)
    y.domain([
        d3.min(data, function(c) {
          return d3.min(c.values, yf)
        })
        ,
        d3.max(data, function(c) {
          return d3.max(c.values, yf);
        })
      ]);

  var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");

  var yAxis = d3.svg.axis()
      .scale(y)
      .tickFormat(yff)
      .orient("left");

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Iterations/Second");

  var city = svg.selectAll(".city")
      .data(data).enter().append("g").attr("class", "city");

  var line = d3.svg.line()
      //.interpolate("basis") //make it smooth
      .x(function(d) { return x(d.bench); })
      .y(function(d) { return y(d.ips); });

  city.append("path")
      .attr("class", "line")
      .attr("d", function(d) { return line(d.values); })
      .style("stroke", function(d) { return color(d.name); });

  city.append("text")
      .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
      .attr("transform", function(d) { return "translate(" + x(d.value.bench) + "," + y(d.value.ips) + ")"; })
      .attr("x", 3)
      .attr("dy", ".35em")
      .text(function(d) { return d.name; });
}
</script>
